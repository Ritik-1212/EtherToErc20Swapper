{
  "address": "0x4D627d5f9347A66c31736DAb5BDeBd552dB6608f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "swapEtherToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb040b2420d8689ebab7362790d9b005620054fb39ba42b513e694f22b2af70bb",
  "receipt": {
    "to": null,
    "from": "0x4C52da05711344e08DD5b2358b7B9b0888a456F4",
    "contractAddress": "0x4D627d5f9347A66c31736DAb5BDeBd552dB6608f",
    "transactionIndex": 7,
    "gasUsed": "53000",
    "logsBloom": "0x
    "blockHash": "0xa61cba0b767d11c31654dfb7b24bc464e3e8083a5dd4267809c8768d9efb21aa",
    "transactionHash": "0xb040b2420d8689ebab7362790d9b005620054fb39ba42b513e694f22b2af70bb",
    "logs": [],
    "blockNumber": 3383527,
    "cumulativeGasUsed": "907203",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "410c68625921eb9af510c9001540a063",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"swapEtherToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Swapper.sol\":\"ERC20Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ERC20Swapper.sol\":{\"content\":\"//SPDX-License-Identiifer: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ERC20Swapper {\\n    function swapEtherToToken(address token, uint minAmount) external payable returns (uint);\\n}\\n\\n//error\\nerror EtherToErc20Swapper__EthNotSent();\\nerror EtherToERC20Swappper__InnsufficientAmount();\\n\\ncontract EtherToERC20Swappper is ERC20Swapper {\\n\\n    function swapEtherToToken(\\n        address token,\\n        uint minAmount\\n    ) external payable override returns (uint) {\\n         // Ensure that the caller has sent Ether\\n        if(msg.value < 0) {\\n            revert EtherToErc20Swapper__EthNotSent();\\n        }\\n\\n        // Retrieve the ERC-20 contract instance\\n        IERC20 erc20 = IERC20(token);\\n\\n        // Calculate the expected amount of tokens to receive\\n        uint expectedAmount = msg.value;\\n\\n        // Ensure that the ERC-20 contract has sufficient balance\\n        if(expectedAmount < erc20.balanceOf(address(this))){\\n\\n            revert EtherToERC20Swappper__InnsufficientAmount();\\n        }\\n\\n        // Transfer the tokens to the caller\\n        erc20.transfer(msg.sender, expectedAmount);\\n\\n        // Return the actual amount of transferred tokens\\n        return expectedAmount;\\n    }\\n}\",\"keccak256\":\"0x201f866c99c2218004a9aeaa55592889833cba4a5a82814e6cc2374b04eb6b9d\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}